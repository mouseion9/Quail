(in-package :q)

(defun dscal-hook (n da dx incx)
  (declare (type fixnum incx))
  ;;(declare (type (simple-array double-float (*)) dx))
  (declare (type double-float da))
  (declare (type fixnum n))
  (prog ((nincx 0) (mp1 0) (m 0) (i 0))
        (declare (type fixnum i))
        (declare (type fixnum m))
        (declare (type fixnum mp1))
        (declare (type fixnum nincx))
        (if (<= n 0) (go end_label))
        (if (= incx 1) (go label20))
        (setf nincx (* n incx))
        (fdo (i 1 (+ i incx))
             ((> i nincx) nil)
             (tagbody (setf (fref dx i) (* da (fref dx i)))))
        (go end_label)
   label20 (setf m (mod n 5))
        (if (= m 0) (go label40))
        (fdo (i 1 (+ i 1))
             ((> i m) nil)
             (tagbody (setf (fref dx i) (* da (fref dx i)))))
        (if (< n 5) (go end_label))
   label40 (setf mp1 (+ m 1))
   (fdo (i mp1 (+ i 5))
        ((> i n) nil)
        (tagbody
          (setf (fref dx i)       (* da (fref dx i)))
          (setf (fref dx (+ i 1)) (* da (fref dx (+ i 1))))
          (setf (fref dx (+ i 2)) (* da (fref dx (+ i 2))))
          (setf (fref dx (+ i 3)) (* da (fref dx (+ i 3))))
          (setf (fref dx (+ i 4)) (* da (fref dx (+ i 4))))))
        (go end_label)
   end_label (return (values n da dx incx))))

