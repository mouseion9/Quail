(in-package :q)

(defun daxpy-hook (n da dx incx dy incy)
  (declare (type fixnum incy))
  ;;(declare (type (simple-array double-float (*)) dy))
  (declare (type fixnum incx))
  ;;(declare (type (simple-array double-float (*)) dx))
  (declare (type double-float da))
  (declare (type fixnum n))
  (prog ((mp1 0) (m 0) (iy 0) (ix 0) (i 0))
        (declare (type fixnum i))
        (declare (type fixnum ix))
        (declare (type fixnum iy))
        (declare (type fixnum m))
        (declare (type fixnum mp1))
        (if (<= n 0) (go end_label))
        (if (= da 0.0) (go end_label))
        (if (and (= incx 1) (= incy 1)) (go label20))
        (setf ix 1)
        (setf iy 1)
        (if (< incx 0) (setf ix (+ (* (- 1 n) incx) 1)))
        (if (< incy 0) (setf iy (+ (* (- 1 n) incy) 1)))
        (fdo (i 1 (+ i 1))
             ((> i n) nil)
             (tagbody (setf (fref dy iy) (+ (fref dy iy) (* da (fref dx ix))))
                      (setf ix (+ ix incx))
                      (setf iy (+ iy incy))))
        (go end_label)
   label20 (setf m (mod n 4))
        (if (= m 0) (go label40))
        (fdo (i 1 (+ i 1))
             ((> i m) nil)
             (tagbody (setf (fref dy i) (+ (fref dy i) (* da (fref dx i))))))
        (if (< n 4) (go end_label))
   label40 (setf mp1 (+ m 1))
   (fdo (i mp1 (+ i 4))
        ((> i n) nil)
        (tagbody
          (setf (fref dy i) (+ (fref dy i) (* da (fref dx i))))
          (setf (fref dy (+ i 1)) (+ (fref dy (+ i 1)) (* da (fref dx (+ i 1)))))
          (setf (fref dy (+ i 2)) (+ (fref dy (+ i 2)) (* da (fref dx (+ i 2)))))
          (setf (fref dy (+ i 3)) (+ (fref dy (+ i 3)) (* da (fref dx (+ i 3)))))))
        (go end_label)
   end_label (return (values n da dx incx dy incy))))

