(in-package :q)

(defun dqrls-hook (x ldx n k qraux y p m qy qty b rsd xb job info)
  ;;(declare (type fixnum info))
  (declare (type fixnum job))
  ;;(declare (type (simple-array single-float (* *)) xb))
  ;;(declare (type (simple-array single-float (* *)) rsd))
  ;;(declare (type (simple-array single-float (* *)) b))
  ;;(declare (type (simple-array single-float (* *)) qty))
  ;;(declare (type (simple-array single-float (* *)) qy))
  (declare (type fixnum m))
  (declare (type fixnum p))
  ;;(declare (type (simple-array single-float (* *)) y))
  ;;(declare (type (simple-array single-float (*)) qraux))
  (declare (type fixnum k))
  (declare (type fixnum n))
  (declare (type fixnum ldx))
  ;;(declare (type (simple-array single-float (* *)) x))
  (prog ((j 0))
        (declare (type fixnum j))
        (fdo (j 1 (+ j 1))
             ((> j m) nil)
             (tagbody (dqrsl-hook x ldx n k qraux (vec-ref y 1 j) (vec-ref qy 1 j)
                         (vec-ref qty 1 j) (vec-ref b 1 j) (vec-ref rsd 1 j)
                         (vec-ref xb 1 j) job info)
                      (if (/= (fref info 1) 0.0) (go label20))))
   label20 (return (values x ldx n k qraux y p m qy qty b rsd xb job info))))

