;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  
;;;                               display-data.lisp
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;  Copyright (c) Statistical Computing Laboratory
;;;                University of Waterloo
;;;                Canada.
;;;  
;;;
;;;  Authors:
;;;     R.W. Oldford 1993, 1995
;;;     
;;;
;;;
;;;----------------------------------------------------------------------------------


(in-package :views)

(export '(dataset-view case-view))


(defgeneric case-view (case &rest keyword-args) 
  (:documentation
   "Produces a display of case.  Keyword arguments are specialized by methods. ~
    These will include at least view style arguments."))


(defmethod case-view ((case T)
                    &rest keyword-args )
  "A not very clever default display that just shows the printed representation ~
   of thing in a text-view."
  (apply #'display case :as-dataset? nil keyword-args))


(defun dataset-view (&rest
                     keyword-args
                     &key
                     (data NIL)
                     (draw? NIL)
                     (viewport NIL)
                     (signposts? T)
                     &allow-other-keys)
  (unless data (setf data (choose-dataset)))
  (if (= 1 (length (list-cases data)))
    (apply #'case-view data
           :draw? draw? :viewport viewport :signposts?  signposts?  keyword-args)
  (let* ((cases (case-display-list    
                 :data data
                 :draw? NIL
                 :scrollable? T
                 :link? T))
         (vars  (variate-display-list
                 :data data 
                 :draw? NIL
                 :scrollable? T
                 :link? T))
         (name  (text-view :text (dataset-name data) :draw? NIL))
         (var-label (text-view :text
                               (format NIL "Variates (~s)" (length (list-variates data)))
                               :draw? NIL))
         (case-label (text-view :text 
                                (format NIL "Cases (~s)" (length (list-cases data)))
                                :draw? NIL))
         (title (text-view :text "Dataset:" :draw? NIL))
         
         (hline1    (line :slope 0 :intercept 0.5
                          :viewed-object data))
         (signpost-view (if signposts?
                          (signposts data :as-dataset? T)
                          )
                        )
         
         result)
     
    (setf result
          (cond
           (signpost-view
            (apply #'view-layout
                   :viewed-object data
                   :subviews (list title
                                   name
                                   case-label
                                   cases
                                   var-label
                                   vars
                                   hline1
                                   signpost-view)
                   :positions '((0 20 80 100)
                                (20 80 80 100)
                                (2 20 60 80)
                                (2 40 0 60)
                                (42 62 60 80)
                                (42 80 0 60)
                                (0 100 0 2)
                                (0 100 -50 0))
                   :draw? NIL
                   keyword-args))
           (T
            (apply #'view-layout
                   :viewed-object data
                   :subviews (list title
                                   name
                                   case-label
                                   cases
                                   var-label
                                   vars
                                   hline1)
                   :positions '((0 20 80 100)
                                (20 80 80 100)
                                (2 20 60 80)
                                (2 40 0 60)
                                (42 62 60 80)
                                (42 80 0 60)
                                (0 100 0 2))
                   :draw? NIL
                   keyword-args)
            )
           
           )
          )
    (when draw?
      (unless (viewport-p viewport)
        (setf viewport 
               (make-viewport
                (make-view-window 
                 :left 10 :right (max 500 (- (wb::screen-width) 100))
                 :bottom (max 0 (- (wb::screen-height) 800))
                 :top (- (wb::screen-height) 100)
                 :title (if (dataset-name data)
                            (format NIL "Viewing ~a" (dataset-name data))
                            "Dataset View")))))
      (draw-view result :viewport viewport))
    result
    )
  ))