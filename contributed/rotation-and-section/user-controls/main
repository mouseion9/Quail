(defun make-the-regions (x y c &key (l 20))
  (defvar quit-region)
  (setf quit-region (make-region x y (* l 3) l))
  (defvar section-region)
(make-region x (+ y l l) (* l 3) l))
  (defvar auto-region (make-region x (+ y (* l 4)) (* l 3) l)))
                         

(defun draw-controls (x y c &key (l 20))
  (canvas-clear c)
  (let ((right (+ x (* l 3))))
    (canvas-draw-rectangle x right y (+ y l) c)
    (canvas-draw-rectangle x right (+ y l l) (+ y (* l 3)) c)
    (canvas-draw-rectangle x right (+ y (* l 4)) (+ y (* l 5)) c)
    (canvas-draw-rectangle x (+ x (* l 3)) (+ y (* l 7)) (+ y (* l 8)) c)
    (canvas-draw-rectangle (+ x l) (+ x l l) (+ y (* l 6)) (+ y (* l 9)) c))
  (canvas-move-to (+ x 15) (+ y 5) c)
  (canvas-draw-string "quit" c)
  (canvas-move-to (+ x 5) (+ y 5 (* l 2)) c)
  (canvas-draw-string "section" c)
  (canvas-move-to (+ x 15) (+ y 5 (* l 4)) c)
  (canvas-draw-string "auto" c)
  (canvas-move-to (+ x 6) (+ y 4 (* l 7)) c)
  (canvas-draw-string "L" c)
  (canvas-move-to (+ x 6 l) (+ y 4 (* l 7)) c)
  (canvas-draw-string "C" c)
  (canvas-draw-polygon (list (cons (+ x 13 l) (+ y 6 (* l 7)))
                             (cons (+ x 13 l) (+ y 8 (* l 7)))
                             (cons (+ x 11 l) (+ y 8 (* l 7)))) c)
  (canvas-move-to (+ x 6 l l) (+ y 4 (* l 7)) c)
  (canvas-draw-string "R" c)
  (canvas-move-to (+ x 6 l) (+ y 4 (* l 8)) c)
  (canvas-draw-string "U" c)
  (canvas-move-to (+ x 6 l) (+ y 4 (* l 6)) c)
  (canvas-draw-string "D" c))